import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from llm import get_llm_response
from database import (
    init_db, save_fact, get_fact, delete_fact,
    save_reminder, get_due_reminders,
    get_user_reminders, delete_user_reminder
)
from utils import parse_fact_command, parse_reminder_command, is_obscene, archaeologist_reply
import config
from news import get_funny_archaeo_news

bot = Bot(token=config.TELEGRAM_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("üè∫ –ô–æ! –Ø —Ç–≤—ñ–π –±—Ä–∞—Ç –ø–æ –∫–æ–ø–∞–Ω–Ω—é. –Ø–∫—â–æ —à–æ—Å—å —Ç—Ä–µ–±–∞ ‚Äî –ø–∏—à–∏, –ø—ñ–¥–∫–∞–∂—É, –ø–æ—Ä–∂—É, –Ω–∞–≥–∞–¥–∞—é, —Ä–æ–∑–≤–µ—Å–µ–ª—é!")

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "üß≠ –Ø –º–æ–∂—É:\n"
        "‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —è–∫ –∑–Ω–∞–≤–µ—Ü—å –ø–æ—à—É–∫—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤\n"
        "‚Ä¢ –ü–æ—Ä–∞–¥–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é, –¥–µ —Ç–æ—á–Ω–æ —î –∑–Ω–∞—Ö—ñ–¥–∫–∏\n"
        "‚Ä¢ –ó–∞–ø–∞–º‚Äô—è—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–≤–æ—ó —Ñ–∞–∫—Ç–∏\n"
        "‚Ä¢ –†–æ–±–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
        "‚Ä¢ –ö–∏–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—ó —ñ —Å–º—ñ—à–Ω—è–≤–∫–∏ –≤ @vseprokop\n"
        "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç—É–≤–∞—Ç–∏ –ø–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º –º–µ—Ç–∞–ª–æ—à—É–∫–∞—á—ñ–≤\n\n"
        "üí¨ –ü—Ä–∏–∫–ª–∞–¥–∏:\n"
        "‚Ä¢ –ó–∞–ø–∞–º‚Äô—è—Ç–∞–π, —è –∑–Ω–∞–π—à–æ–≤ —Ñ—ñ–±—É–ª–∞ ‚Äî —Å–∫—ñ—Ñ—Å—å–∫–∞\n"
        "‚Ä¢ –ù–∞–≥–∞–¥–∞–π –∑–∞—Ä—è–¥–∏—Ç–∏ –∞–∫—É–º–∏ –æ 19:30\n"
        "‚Ä¢ /–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ–∫–∞–∂–∏ –≤—Å—ñ\n"
        "‚Ä¢ /–≤–∏–¥–∞–ª–∏—Ç–∏_–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ—Ç—É—à–∫—É"
    )

@dp.message(Command("–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"))
async def list_reminders(message: types.Message):
    uid = message.from_user.id
    reminders = await get_user_reminders(uid)
    if reminders:
        reply = "üìú –ì–ª—è–Ω—å, —â–æ –Ω–∞–≥–∞–¥–∞–π–∫–∏ —Ç—Ä–∏–º–∞—é—Ç—å:\n" + "\n".join(
            [f"‚Ä¢ {r[1]} ‚Äî {r[2].strftime('%Y-%m-%d %H:%M')}" for r in reminders])
    else:
        reply = "üîï –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞ –Ω—ñ—á–æ–≥–æ, —à–æ –± –Ω–∞–ø—Ä—è–≥–∞–ª–æ üòâ"
    await message.answer(reply)

@dp.message(Command("–≤–∏–¥–∞–ª–∏—Ç–∏_–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"))
async def delete_reminder(message: types.Message):
    uid = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) == 2:
        deleted = await delete_user_reminder(uid, args[1])
        if deleted:
            await message.answer("üóëÔ∏è –ì–æ—Ç–æ–≤–æ, –≤–∏–∫–∏–Ω—É–≤ –∑ –≥–æ–ª–æ–≤–∏.")
        else:
            await message.answer("‚ùó –ù–µ–º–∞ —Ç–∞–∫–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, –¥—Ä—É–∂–∏—â–µ.")
    else:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —Ç–∞–∫–∏–π: /–≤–∏–¥–∞–ª–∏—Ç–∏_–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è [—Ç–µ–∫—Å—Ç]")

@dp.message()
async def handle_message(message: types.Message):
    text = message.text.lower()
    uid = message.from_user.id

    if is_obscene(text):
        await message.answer(archaeologist_reply(text, rude=True))
        return

    if text.startswith("–∑–∞–ø–∞–º‚Äô—è—Ç–∞–π") or text.startswith("–∑–∞–ø–∞–º—è—Ç–∞–π"):
        key, value = parse_fact_command(text)
        await save_fact(uid, key, value)
        await message.answer(f"üß† –¢–∞ —á—ñ—Ç–∫–æ, —Ç—Ä–∏–º–∞—é –≤ –≥–æ–ª–æ–≤—ñ: {key} ‚Äî {value}")

    elif text.startswith("—â–æ —Ç–∏ –∑–Ω–∞—î—à") or text.startswith("—è–∫ –º–µ–Ω–µ") or text.startswith("—è–∫–∞ –º–æ—è"):
        key = text.split("–ø—Ä–æ")[-1].strip()
        value = await get_fact(uid, key)
        if value:
            await message.answer(f"üìå –Ñ, –¥–∏–≤–∏—Å—å: {key} ‚Äî {value}")
        else:
            await message.answer("ü§∑‚Äç‚ôÇÔ∏è –ù–µ –±–∞—á–∏–≤ —Ç–∞–∫–µ, —à–µ—Ñ.")

    elif text.startswith("–∑–∞–±—É–¥—å"):
        key = text.split("–ø—Ä–æ")[-1].strip()
        await delete_fact(uid, key)
        await message.answer(f"üßπ –í—Å–µ, –∑–∞–±—É–≤. –Ø–∫ –Ω–µ–≤–¥–∞–ª—É –∑–Ω–∞—Ö—ñ–¥–∫—É.")

    elif text.startswith("–Ω–∞–≥–∞–¥–∞–π"):
        rem = await parse_reminder_command(message.text, uid)
        if rem:
            await save_reminder(*rem)
            await message.answer("‚è∞ –ü—Ä–∏–π–Ω—è—Ç–æ! –ù–∞–≥–∞–¥–∞—é —Ç–æ—á–Ω–æ.")
        else:
            await message.answer("‚õî –©–æ—Å—å –∑ —á–∞—Å–æ–º –Ω–µ —Ç–µ, —Å–ø—Ä–æ–±—É–π —Ç–∞–∫: '–Ω–∞–≥–∞–¥–∞–π –∑—Ä–æ–±–∏—Ç–∏ —â–æ—Å—å –æ 14:00'")

    else:
        reply = await get_llm_response(text)
        await message.answer(archaeologist_reply(reply))

async def notify_reminders():
    due = await get_due_reminders()
    for uid, text in due:
        try:
            await bot.send_message(uid, f"üîî –ù–∞–ø–æ–º—ñ–Ω–æ–∫ –ø—Ä–∏–ª–µ—Ç—ñ–≤: {text}")
        except:
            pass

async def post_news_to_channel():
    news = await get_funny_archaeo_news()
    await bot.send_message("@vseprokop", news, parse_mode="HTML")

async def main():
    try:
        await init_db()
    except Exception as e:
        print(f"[DB INIT ERROR] ‚ùå {e}")
        return

    await bot.delete_webhook(drop_pending_updates=True)
    scheduler.add_job(notify_reminders, 'interval', minutes=1)
    scheduler.add_job(post_news_to_channel, 'cron', hour=9, minute=0)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
