import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from llm import get_llm_response
from database import (
    init_db, save_fact, get_fact, delete_fact,
    save_reminder, get_due_reminders,
    get_user_reminders, delete_user_reminder
)
from utils import parse_fact_command, parse_reminder_command
import config

bot = Bot(token=config.TELEGRAM_TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ù–∞–ø–∏—à–∏ /help, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —â–æ —è –≤–º—ñ—é.")


@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(
        "üß† –Ø –≤–º—ñ—é:\n"
        "‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è\n"
        "‚Ä¢ –ó–∞–ø–∞–º‚Äô—è—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ–∞–∫—Ç–∏\n"
        "‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ –≤–∞–∂–ª–∏–≤–µ\n\n"
        "üí¨ –°–ø—Ä–æ–±—É–π:\n"
        "‚Ä¢ –ó–∞–ø–∞–º‚Äô—è—Ç–∞–π, –º–æ—î —ñ–º‚Äô—è ‚Äî –î–º–∏—Ç—Ä–æ\n"
        "‚Ä¢ –ù–∞–≥–∞–¥–∞–π –∫—É–ø–∏—Ç–∏ –º–æ–ª–æ–∫–æ –æ 18:00\n"
        "‚Ä¢ –©–æ —Ç–∏ –∑–Ω–∞—î—à –ø—Ä–æ –º–æ—î —ñ–º‚Äô—è?\n"
        "‚Ä¢ /–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ‚Äî —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ /–≤–∏–¥–∞–ª–∏—Ç–∏_–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è [—Ç–µ–∫—Å—Ç] ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏"
    )


@dp.message(Command("–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"))
async def list_reminders(message: Message):
    uid = message.from_user.id
    reminders = await get_user_reminders(uid)
    if reminders:
        reply = "üîî –¢–≤–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n" + "\n".join(
            [f"‚Ä¢ {r[1]} ‚Äî {r[2].strftime('%Y-%m-%d %H:%M')}" for r in reminders])
    else:
        reply = "üì≠ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å."
    await message.answer(reply)


@dp.message(Command("–≤–∏–¥–∞–ª–∏—Ç–∏_–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"))
async def delete_reminder(message: Message):
    uid = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) == 2:
        deleted = await delete_user_reminder(uid, args[1])
        if deleted:
            await message.answer("üóëÔ∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.")
    else:
        await message.answer("‚ùó –ü—Ä–∏–∫–ª–∞–¥: /–≤–∏–¥–∞–ª–∏—Ç–∏_–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫—É–ø–∏—Ç–∏ –º–æ–ª–æ–∫–æ")


@dp.message(F.text)
async def handle_message(message: Message):
    text = message.text.lower()
    uid = message.from_user.id

    if text.startswith("–∑–∞–ø–∞–º‚Äô—è—Ç–∞–π") or text.startswith("–∑–∞–ø–∞–º—è—Ç–∞–π"):
        key, value = parse_fact_command(text)
        await save_fact(uid, key, value)
        await message.answer(f"‚úÖ –ó–∞–ø–∞–º‚Äô—è—Ç–∞–≤: {key} ‚Äî {value}")

    elif text.startswith("—â–æ —Ç–∏ –∑–Ω–∞—î—à") or text.startswith("—è–∫ –º–µ–Ω–µ") or text.startswith("—è–∫–∞ –º–æ—è"):
        key = text.split("–ø—Ä–æ")[-1].strip()
        value = await get_fact(uid, key)
        if value:
            await message.answer(f"üìå –¢–∏ —Å–∫–∞–∑–∞–≤: {key} ‚Äî {value}")
        else:
            await message.answer("ü§î –Ø —Ü—å–æ–≥–æ –Ω–µ –∑–Ω–∞—é.")

    elif text.startswith("–∑–∞–±—É–¥—å"):
        key = text.split("–ø—Ä–æ")[-1].strip()
        await delete_fact(uid, key)
        await message.answer(f"üóëÔ∏è –ó–∞–±—É–≤ –ø—Ä–æ '{key}'.")

    elif text.startswith("–Ω–∞–≥–∞–¥–∞–π"):
        rem = parse_reminder_command(message.text, uid)
        if rem:
            await save_reminder(*rem)
            await message.answer("‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–∞—Å –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.")

    else:
        reply = await get_llm_response(message.text)
        await message.answer(reply)


async def notify_reminders():
    due = await get_due_reminders()
    for uid, text in due:
        try:
            await bot.send_message(uid, f"üîî –ù–∞–≥–∞–¥—É—é: {text}")
        except:
            pass


async def main():
    await init_db()
    scheduler.add_job(notify_reminders, 'interval', minutes=1)
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
