import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from llm import get_llm_response
from database import (
    init_db, save_fact, get_fact, delete_fact,
    save_reminder, get_due_reminders,
    get_user_reminders, delete_user_reminder
)
from utils import parse_fact_command, parse_reminder_command, is_obscene, archaeologist_reply
import config
from news import get_funny_archaeo_news

bot = Bot(token=config.TELEGRAM_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("üè∫ –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –∞—Ä—Ö–µ–æ–ª–æ–≥-–¥—Ä—É–≥ —ñ –∫–æ–ª–µ–≥–∞. –ó–∞–ø–∏—Ç–∞–π –º–µ–Ω–µ —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ –∞–±–æ –Ω–∞–ø–∏—à–∏ /help ‚Äî —Ä–æ–∑–∫–∞–∂—É, —â–æ –≤–º—ñ—é!")

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "üß≠ –Ø –≤–º—ñ—é:\n"
        "‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (–∑ –≥—É–º–æ—Ä–æ–º —ñ –¥–æ—Å–≤—ñ–¥–æ–º)\n"
        "‚Ä¢ –ó–∞–ø–∞–º‚Äô—è—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ–∞–∫—Ç–∏ –ø—Ä–æ —Ç–µ–±–µ\n"
        "‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ –≤–∞–∂–ª–∏–≤–µ\n"
        "‚Ä¢ –†–æ–∑–ø–æ–≤—ñ–¥–∞—Ç–∏ –±–∞–π–∫–∏, –∞–Ω–µ–∫–¥–æ—Ç–∏ –π –Ω–æ–≤–∏–Ω–∏ –∑ –∞—Ä—Ö–µ–æ–ª–æ–≥—ñ—ó\n"
        "‚Ä¢ –©–æ–¥–Ω—è –æ 9:00 ‚Äî –∫–∏–¥–∞—é —Å–≤—ñ–∂—ñ –∞—Ä—Ö–µ–æ-–Ω–æ–≤–∏–Ω–∏ –≤ @vseprokop\n\n"
        "üí¨ –ü—Ä–∏–∫–ª–∞–¥–∏:\n"
        "‚Ä¢ –ó–∞–ø–∞–º‚Äô—è—Ç–∞–π, –º–æ—è –∑–Ω–∞—Ö—ñ–¥–∫–∞ ‚Äî —Ä–∏–º—Å—å–∫–∞ –º–æ–Ω–µ—Ç–∞\n"
        "‚Ä¢ –ù–∞–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∏–±–æ—Ä –æ 18:00\n"
        "‚Ä¢ /–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ‚Äî —Å–ø–∏—Å–æ–∫\n"
        "‚Ä¢ /–≤–∏–¥–∞–ª–∏—Ç–∏_–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è [—Ç–µ–∫—Å—Ç]"
    )

@dp.message(Command("–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"))
async def list_reminders(message: types.Message):
    uid = message.from_user.id
    reminders = await get_user_reminders(uid)
    if reminders:
        reply = "üìú –û—Å—å —Ç–≤–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n" + "\n".join(
            [f"‚Ä¢ {r[1]} ‚Äî {r[2].strftime('%Y-%m-%d %H:%M')}" for r in reminders])
    else:
        reply = "üîï –£ —Ç–µ–±–µ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å."
    await message.answer(reply)

@dp.message(Command("–≤–∏–¥–∞–ª–∏—Ç–∏_–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"))
async def delete_reminder(message: types.Message):
    uid = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) == 2:
        deleted = await delete_user_reminder(uid, args[1])
        if deleted:
            await message.answer("üóëÔ∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer("‚ùó –¢–∞–∫–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤.")
    else:
        await message.answer("‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥: /–≤–∏–¥–∞–ª–∏—Ç–∏_–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫—É–ø–∏—Ç–∏ –±–∞—Ç–∞—Ä–µ–π–∫–∏")

@dp.message()
async def handle_message(message: types.Message):
    text = message.text.lower()
    uid = message.from_user.id

    if is_obscene(text):
        await message.answer(archaeologist_reply(text, rude=True))
        return

    if text.startswith("–∑–∞–ø–∞–º‚Äô—è—Ç–∞–π") or text.startswith("–∑–∞–ø–∞–º—è—Ç–∞–π"):
        key, value = parse_fact_command(text)
        await save_fact(uid, key, value)
        await message.answer(f"üß† –ó–∞–ø–∞–º‚Äô—è—Ç–∞–≤: {key} ‚Äî {value}")

    elif text.startswith("—â–æ —Ç–∏ –∑–Ω–∞—î—à") or text.startswith("—è–∫ –º–µ–Ω–µ") or text.startswith("—è–∫–∞ –º–æ—è"):
        key = text.split("–ø—Ä–æ")[-1].strip()
        value = await get_fact(uid, key)
        if value:
            await message.answer(f"üìå –£ —Ç–µ–±–µ —î —Ç–∞–∫–µ: {key} ‚Äî {value}")
        else:
            await message.answer("ü§∑‚Äç‚ôÇÔ∏è –ù–µ –ø–∞–º‚Äô—è—Ç–∞—é —Ç–∞–∫–æ–≥–æ.")

    elif text.startswith("–∑–∞–±—É–¥—å"):
        key = text.split("–ø—Ä–æ")[-1].strip()
        await delete_fact(uid, key)
        await message.answer(f"üßπ –í—Å–µ, –∑–∞–±—É–≤ –ø—Ä–æ '{key}'.")

    elif text.startswith("–Ω–∞–≥–∞–¥–∞–π"):
        rem = await parse_reminder_command(message.text, uid)
        if rem:
            await save_reminder(*rem)
            await message.answer("‚è∞ –ì–æ—Ç–æ–≤–æ, –Ω–∞–≥–∞–¥–∞—é —è–∫ –¥–æ–º–æ–≤–ª—è–ª–∏—Å—å.")
        else:
            await message.answer("‚õî –ù–µ –∑–º—ñ–≥ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–∞—Å, –ø–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

    else:
        reply = await get_llm_response(text)
        await message.answer(archaeologist_reply(reply))

async def notify_reminders():
    due = await get_due_reminders()
    for uid, text in due:
        try:
            await bot.send_message(uid, f"üîî –ù–∞–≥–∞–¥—É—é: {text}")
        except:
            pass

async def post_news_to_channel():
    news = await get_funny_archaeo_news()
    await bot.send_message("@vseprokop", news, parse_mode="HTML")

async def main():
    await init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    scheduler.add_job(notify_reminders, 'interval', minutes=1)
    scheduler.add_job(post_news_to_channel, 'cron', hour=9, minute=0)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
